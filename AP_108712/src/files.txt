SWICTH CASE MENU

String option;
Contact contact;
while (true) {
    // print all menu options
    System.out.print("Select option: ");
    option = sc.nextLine();

    switch (option) {
        case "1": 
            createContact(contactManager);
            break;
        case "2": 
            modifyContact(contactManager);
            break;
        case "3": 
            deleteContact(contactManager);
            break;
        case "4": 
            contact = searchContactByName(contactManager);
            if (contact!=null) System.out.println(contact);
            else System.out.println("Contact not found.");
            break;
        case "12":
            sc.close();
            // save back to file
            // not implemented yet
            // contactManager.save("contactos.txt");
            System.out.println("Bye");
            System.exit(0);;
    }

}

PRINT TERMINAL TO FILE:
public static void main(String[] args) {
        try {
            // Create a FileOutputStream to write to the file
            FileOutputStream fileOutputStream = new FileOutputStream("output.txt");
            
            // Create a PrintStream that writes to the FileOutputStream
            PrintStream printStream = new PrintStream(fileOutputStream);
            
            // Redirect the System.out to the PrintStream
            System.setOut(printStream);
            
            // Your code and console output here
            System.out.println("Hello, world!");
            System.out.println("This is a test.");
            
            // Close the PrintStream and FileOutputStream
            printStream.close();
            fileOutputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

EQUALS METHOD:
@Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Contact other = (Contact) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (phoneNumber != other.phoneNumber)
            return false;
        if (email == null) {
            if (other.email != null)
                return false;
        } else if (!email.equals(other.email))
            return false;
        return true;
    }

HASHCODE METHOD:
@Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + phoneNumber;
        result = prime * result + ((email == null) ? 0 : email.hashCode());
        return result;
    }